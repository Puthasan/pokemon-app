{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\modes\\\\Desktop\\\\pokemon-app\\\\frontend\\\\pokemon-react-app\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchDataAction } from \"../actions/index.js\"; // Import your action(s) here\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const data = useSelector(state => state.data); // Assuming \"data\" is a piece of state in your Redux store\n\n  const typeEmojis = {\n    grass: \"🌿\",\n    fire: \"🔥\",\n    water: \"💧\",\n    bug: \"🐞\",\n    normal: \"🧑\",\n    poison: \"☠️\",\n    electric: \"⚡\",\n    ground: \"🌍\",\n    fairy: \"🧚\",\n    fighting: \"🥊\",\n    psychic: \"🔮\",\n    rock: \"🪨\",\n    ghost: \"👻\",\n    ice: \"❄️\",\n    dragon: \"🐉\",\n    steel: \"🔩\",\n    flying: \"🕊️\",\n    dark: \"🌑\",\n    ghost: \"👻\",\n    unknown: \"❓\",\n    shadow: \"👤\"\n    // Add more types and emojis as needed\n  };\n  console.log(data);\n  const fetchData = () => {\n    const id = Math.floor(Math.random() * 1306) + 1;\n    dispatch(fetchDataAction(id));\n  };\n  // console.log(\"hello\",fetchData())\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Pokemon App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"Fetch Pokemon Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), data ? data.types ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.typeIcon,\n        alt: `${data.types[0].type.name} icon`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: data.types[0].type.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: data.results.map(pokemon => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: pokemon.name\n        }, pokemon.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Pokemon data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VrJnXoQP2+XQ+/f/72CAYzsOD3w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useDispatch","useSelector","fetchDataAction","jsxDEV","_jsxDEV","App","_s","dispatch","data","state","typeEmojis","grass","fire","water","bug","normal","poison","electric","ground","fairy","fighting","psychic","rock","ghost","ice","dragon","steel","flying","dark","unknown","shadow","console","log","fetchData","id","Math","floor","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","types","src","typeIcon","alt","type","name","results","map","pokemon","_c","$RefreshReg$"],"sources":["C:/Users/modes/Desktop/pokemon-app/frontend/pokemon-react-app/src/components/App.js"],"sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchDataAction } from \"../actions/index.js\"; // Import your action(s) here\n\n\nfunction App() {\n  const dispatch = useDispatch();\n  const data = useSelector((state) => state.data); // Assuming \"data\" is a piece of state in your Redux store\n\n  const typeEmojis = {\n    grass: \"🌿\",\n    fire: \"🔥\",\n    water: \"💧\",\n    bug: \"🐞\",\n    normal: \"🧑\",\n    poison: \"☠️\",\n    electric: \"⚡\",\n    ground: \"🌍\",\n    fairy: \"🧚\",\n    fighting: \"🥊\",\n    psychic: \"🔮\",\n    rock: \"🪨\",\n    ghost: \"👻\",\n    ice: \"❄️\",\n    dragon: \"🐉\",\n    steel: \"🔩\",\n    flying: \"🕊️\",\n    dark: \"🌑\",\n    ghost: \"👻\",\n    unknown: \"❓\",\n    shadow: \"👤\",\n    // Add more types and emojis as needed\n  };\n\n  console.log(data)\n\n\n  const fetchData = () => {\n    const id = Math.floor(Math.random() * 1306) + 1;\n    dispatch(fetchDataAction(id));\n  };\n  // console.log(\"hello\",fetchData())\n  \n  return (\n    <div className=\"App\">\n      <h1>My Pokemon App</h1>\n      <button onClick={fetchData}>Fetch Pokemon Data</button>\n      {data ? (\n  data.types ? (\n    <div>\n      <img src={data.typeIcon} alt={`${data.types[0].type.name} icon`} />\n      <p>{data.types[0].type.name}</p>\n      <ul>\n        {data.results.map((pokemon) => (\n          <li key={pokemon.name}>{pokemon.name}</li>\n        ))}\n      </ul>\n    </div>\n  ) : (\n\n          <p>No Pokemon data available</p>\n        )\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}