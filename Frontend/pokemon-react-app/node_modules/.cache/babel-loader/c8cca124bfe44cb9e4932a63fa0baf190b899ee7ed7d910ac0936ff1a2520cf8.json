{"ast":null,"code":"import { CATCH_POKEMON_REQUEST, CATCH_POKEMON_SUCCESS, CATCH_POKEMON_FAILURE } from '../actions/catchPokemonActions';\nconst initialState = {\n  isCatching: false,\n  catchResult: null,\n  caughtPokemon: null,\n  error: null\n};\nconst catchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CATCH_POKEMON_REQUEST:\n      return {\n        ...state,\n        isCatching: true,\n        catchResult: null,\n        caughtPokemon: null,\n        error: null\n      };\n    case CATCH_POKEMON_SUCCESS:\n      return {\n        ...state,\n        isCatching: false,\n        catchResult: action.payload,\n        caughtPokemon: action.payload ? generateRandomPokemon() : null,\n        error: null\n      };\n    case CATCH_POKEMON_FAILURE:\n      return {\n        ...state,\n        isCatching: false,\n        catchResult: null,\n        caughtPokemon: null,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\n// Helper function to generate random Pokemon data for demonstration\nconst generateRandomPokemon = () => {\n  const types = ['grass', 'fire', 'water', 'bug', 'normal', 'poison']; // Add more types as needed\n  const randomType = types[Math.floor(Math.random() * types.length)];\n  return {\n    id: Math.floor(Math.random() * 1000) + 1,\n    name: 'Random Pokemon',\n    sprite: 'https://example.com/pokemon.png',\n    // Replace with actual sprite URL\n    type: [randomType]\n  };\n};\nexport default catchReducer;","map":{"version":3,"names":["CATCH_POKEMON_REQUEST","CATCH_POKEMON_SUCCESS","CATCH_POKEMON_FAILURE","initialState","isCatching","catchResult","caughtPokemon","error","catchReducer","state","action","type","payload","generateRandomPokemon","types","randomType","Math","floor","random","length","id","name","sprite"],"sources":["C:/Users/modes/Desktop/pokemon-app/frontend/pokemon-react-app/src/reducers/catchReducer.js"],"sourcesContent":["import {\r\n  CATCH_POKEMON_REQUEST,\r\n  CATCH_POKEMON_SUCCESS,\r\n  CATCH_POKEMON_FAILURE,\r\n} from '../actions/catchPokemonActions';\r\n\r\nconst initialState = {\r\n  isCatching: false,\r\n  catchResult: null,\r\n  caughtPokemon: null,\r\n  error: null,\r\n};\r\n\r\nconst catchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CATCH_POKEMON_REQUEST:\r\n      return {\r\n        ...state,\r\n        isCatching: true,\r\n        catchResult: null,\r\n        caughtPokemon: null,\r\n        error: null,\r\n      };\r\n\r\n    case CATCH_POKEMON_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isCatching: false,\r\n        catchResult: action.payload,\r\n        caughtPokemon: action.payload ? generateRandomPokemon() : null,\r\n        error: null,\r\n      };\r\n\r\n    case CATCH_POKEMON_FAILURE:\r\n      return {\r\n        ...state,\r\n        isCatching: false,\r\n        catchResult: null,\r\n        caughtPokemon: null,\r\n        error: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Helper function to generate random Pokemon data for demonstration\r\nconst generateRandomPokemon = () => {\r\n  const types = ['grass', 'fire', 'water', 'bug', 'normal', 'poison']; // Add more types as needed\r\n  const randomType = types[Math.floor(Math.random() * types.length)];\r\n\r\n  return {\r\n    id: Math.floor(Math.random() * 1000) + 1,\r\n    name: 'Random Pokemon',\r\n    sprite: 'https://example.com/pokemon.png', // Replace with actual sprite URL\r\n    type: [randomType],\r\n  };\r\n};\r\n\r\nexport default catchReducer;\r\n"],"mappings":"AAAA,SACEA,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAqB,QAChB,gCAAgC;AAEvC,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,IAAI;EACjBC,aAAa,EAAE,IAAI;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,KAAK;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKX,qBAAqB;MACxB,OAAO;QACL,GAAGS,KAAK;QACRL,UAAU,EAAE,IAAI;QAChBC,WAAW,EAAE,IAAI;QACjBC,aAAa,EAAE,IAAI;QACnBC,KAAK,EAAE;MACT,CAAC;IAEH,KAAKN,qBAAqB;MACxB,OAAO;QACL,GAAGQ,KAAK;QACRL,UAAU,EAAE,KAAK;QACjBC,WAAW,EAAEK,MAAM,CAACE,OAAO;QAC3BN,aAAa,EAAEI,MAAM,CAACE,OAAO,GAAGC,qBAAqB,CAAC,CAAC,GAAG,IAAI;QAC9DN,KAAK,EAAE;MACT,CAAC;IAEH,KAAKL,qBAAqB;MACxB,OAAO;QACL,GAAGO,KAAK;QACRL,UAAU,EAAE,KAAK;QACjBC,WAAW,EAAE,IAAI;QACjBC,aAAa,EAAE,IAAI;QACnBC,KAAK,EAAEG,MAAM,CAACE;MAChB,CAAC;IAEH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;EAClC,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;EACrE,MAAMC,UAAU,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,KAAK,CAACK,MAAM,CAAC,CAAC;EAElE,OAAO;IACLC,EAAE,EAAEJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC;IACxCG,IAAI,EAAE,gBAAgB;IACtBC,MAAM,EAAE,iCAAiC;IAAE;IAC3CX,IAAI,EAAE,CAACI,UAAU;EACnB,CAAC;AACH,CAAC;AAED,eAAeP,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}