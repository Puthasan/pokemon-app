{"ast":null,"code":"export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\nexport const STORE_DATA = 'STORE_DATA';\nexport const fetchDataRequest = () => ({\n  type: FETCH_DATA_REQUEST\n});\nexport const fetchDataSuccess = data => ({\n  type: FETCH_DATA_SUCCESS,\n  payload: data\n});\nexport const fetchDataFailure = error => ({\n  type: FETCH_DATA_FAILURE,\n  payload: error\n});\nexport const storeDataAction = data => ({\n  type: STORE_DATA,\n  payload: data\n});\nexport const CATCH_POKEMON_REQUEST = 'CATCH_POKEMON_REQUEST';\nexport const CATCH_POKEMON_SUCCESS = 'CATCH_POKEMON_SUCCESS';\nexport const CATCH_POKEMON_FAILURE = 'CATCH_POKEMON_FAILURE';\nexport const catchPokemonRequest = () => ({\n  type: CATCH_POKEMON_REQUEST\n});\nexport const catchPokemonSuccess = isCaught => ({\n  type: CATCH_POKEMON_SUCCESS,\n  payload: isCaught\n});\nexport const catchPokemonFailure = error => ({\n  type: CATCH_POKEMON_FAILURE,\n  payload: error\n});\nexport const catchPokemonAction = () => async dispatch => {\n  try {\n    dispatch(catchPokemonRequest());\n\n    // Add your catch logic here\n    const isCaught = Math.random() < 0.5; // For example, 50% chance of success\n\n    dispatch(catchPokemonSuccess(isCaught));\n  } catch (error) {\n    dispatch(catchPokemonFailure(error.message));\n  }\n};\nexport const fetchDataAction = pokemonId => async dispatch => {\n  try {\n    dispatch(fetchDataRequest());\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`);\n    const data = await response.json();\n    if (data.id) {\n      const types = data.types.map(typeObj => typeObj.type.name);\n      const pokemonWithDetails = {\n        id: data.id,\n        name: data.name,\n        sprite: data.sprites.front_default,\n        type: types\n      };\n      dispatch(storeDataAction(pokemonWithDetails));\n      dispatch(fetchDataSuccess(pokemonWithDetails));\n    } else {\n      console.log('Invalid data received:', data);\n    }\n  } catch (error) {\n    dispatch(fetchDataFailure(error.message));\n  }\n};\nexport default catchPokemonAction;\nfetchDataAction;","map":{"version":3,"names":["FETCH_DATA_REQUEST","FETCH_DATA_SUCCESS","FETCH_DATA_FAILURE","STORE_DATA","fetchDataRequest","type","fetchDataSuccess","data","payload","fetchDataFailure","error","storeDataAction","CATCH_POKEMON_REQUEST","CATCH_POKEMON_SUCCESS","CATCH_POKEMON_FAILURE","catchPokemonRequest","catchPokemonSuccess","isCaught","catchPokemonFailure","catchPokemonAction","dispatch","Math","random","message","fetchDataAction","pokemonId","response","fetch","json","id","types","map","typeObj","name","pokemonWithDetails","sprite","sprites","front_default","console","log"],"sources":["C:/Users/modes/Desktop/pokemon-app/frontend/pokemon-react-app/src/actions/index.js"],"sourcesContent":["export const FETCH_DATA_REQUEST = 'FETCH_DATA_REQUEST';\r\nexport const FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS';\r\nexport const FETCH_DATA_FAILURE = 'FETCH_DATA_FAILURE';\r\nexport const STORE_DATA = 'STORE_DATA';\r\n\r\n\r\nexport const fetchDataRequest = () => ({\r\n  type: FETCH_DATA_REQUEST,\r\n});\r\n\r\nexport const fetchDataSuccess = (data) => ({\r\n  type: FETCH_DATA_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const fetchDataFailure = (error) => ({\r\n  type: FETCH_DATA_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const storeDataAction = (data) => ({\r\n  type: STORE_DATA,\r\n  payload: data,\r\n});\r\n\r\n\r\nexport const CATCH_POKEMON_REQUEST = 'CATCH_POKEMON_REQUEST';\r\nexport const CATCH_POKEMON_SUCCESS = 'CATCH_POKEMON_SUCCESS';\r\nexport const CATCH_POKEMON_FAILURE = 'CATCH_POKEMON_FAILURE';\r\n\r\nexport const catchPokemonRequest = () => ({\r\n  type: CATCH_POKEMON_REQUEST,\r\n});\r\n\r\nexport const catchPokemonSuccess = (isCaught) => ({\r\n  type: CATCH_POKEMON_SUCCESS,\r\n  payload: isCaught,\r\n});\r\n\r\nexport const catchPokemonFailure = (error) => ({\r\n  type: CATCH_POKEMON_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const catchPokemonAction = () => async (dispatch) => {\r\n  try {\r\n    dispatch(catchPokemonRequest());\r\n\r\n    // Add your catch logic here\r\n    const isCaught = Math.random() < 0.5; // For example, 50% chance of success\r\n\r\n    dispatch(catchPokemonSuccess(isCaught));\r\n  } catch (error) {\r\n    dispatch(catchPokemonFailure(error.message));\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const fetchDataAction = (pokemonId) => async (dispatch) => {\r\n  try {\r\n    dispatch(fetchDataRequest());\r\n\r\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`);\r\n    const data = await response.json();\r\n\r\n    if (data.id) {\r\n      const types = data.types.map((typeObj) => typeObj.type.name);\r\n      const pokemonWithDetails = {\r\n        id: data.id,\r\n        name: data.name,\r\n        sprite: data.sprites.front_default,\r\n        type: types,\r\n      };\r\n\r\n      dispatch(storeDataAction(pokemonWithDetails));\r\n      dispatch(fetchDataSuccess(pokemonWithDetails));\r\n    } else {\r\n      console.log('Invalid data received:', data);\r\n    }\r\n  } catch (error) {\r\n    dispatch(fetchDataFailure(error.message));\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default catchPokemonAction; fetchDataAction; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}